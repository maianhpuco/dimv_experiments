import os
import numpy as np
import pandas as pd 
import json 
from datetime import datetime 
def mse(a, b):
    return (np.square(a-b)).mean(axis=None)

def calc_rmse(sub_folder, train_or_test):
    
    get_Xpath = lambda train_test, algo: \
            os.path.join(root, sub_folder, '{}_{}_Xrecon.csv'.format(train_or_test, algo))
    
    softImpute_Xpath = get_Xpath(train_or_test, 'softImpute')
    impDi_Xpath = get_Xpath(train_or_test, 'impDi')
    original_Xpath = os.path.join(
            root, 
            "../../processed",
            ''.join(["X", train_or_test, ".csv"])) 
    
    softImpute_imputed = pd.read_csv(softImpute_Xpath).to_numpy()
    impDi_imputed = pd.read_csv(impDi_Xpath).to_numpy()
    original_data = pd.read_csv(original_Xpath).to_numpy() 


    softImputed_mse = mse(softImpute_imputed, original_data)
    impDi_mse = mse(impDi_imputed, original_data) 

    result = {train_or_test: {"softImputed_mse": softImputed_mse, "impDi_mse": impDi_mse}} 
    return result 

def calc_rmse_pipeline(sub_folder):
    result = calc_rmse(sub_folder, "train")
    result.update(calc_rmse(sub_folder, "test"))
    print(result)
    return result  
    
if __name__=='__main__':
    root = '../../../data/mnist/imputed/v12/'
    mse_results = {}
    for sub_folder in os.listdir(root):
        if len(sub_folder.split("_")) >3 \
                and sub_folder.split("_")[-1]=='50':
            mse_results.update({sub_folder :calc_rmse_pipeline(sub_folder)}) 
    
    
    df = pd.DataFrame(mse_results)
    print(df)
    now = datetime.now()
    string_time = now.strftime("%Y-%m-%d-%H:%M")

    result_path = os.path.join(root, "../../mse", "".join([string_time, '.csv']))
    
    df.to_csv(result_path) 
    
